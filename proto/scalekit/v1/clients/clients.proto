syntax = "proto3";

package scalekit.v1.clients;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "scalekit/v1/commons/commons.proto";
import "scalekit/v1/options/options.proto";

option go_package = "github.com/scalekit-inc/scalekit/pkg/grpc/clients";

service ClientService {
  rpc ListClient(ListClientsRequest) returns (ListClientsResponse) {
    // FIXME how will we test this using API
    option (scalekit.v1.options.auth_option) = {authentication_type: SESSION};
    option (google.api.http) = {get: "/api/v1/clients"};
  }

  rpc GetClient(GetClientRequest) returns (GetClientResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: WORKSPACE_SESSION_CLIENT};
    option (google.api.http) = {get: "/api/v1/clients/{client_id}"};
  }

  rpc UpdateClient(UpdateClientRequest) returns (UpdateClientResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: WORKSPACE_SESSION_CLIENT};
    option (google.api.http) = {
      put: "/api/v1/clients/{client_id}"
      body: "client"
      additional_bindings: {
        patch: "/api/v1/clients/{client_id}"
        body: "client"
      }
    };
  }

  rpc CreateClientSecret(CreateClientSecretRequest) returns (CreateClientSecretResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: WORKSPACE_SESSION_CLIENT};
    option (google.api.http) = {post: "/api/v1/clients/{client_id}/secrets"};
  }

  rpc UpdateClientSecret(UpdateClientSecretRequest) returns (UpdateClientSecretResponse) {
    option (scalekit.v1.options.auth_option) = {authentication_type: WORKSPACE_SESSION_CLIENT};
    option (google.api.http) = {
      put: "/api/v1/clients/{client_id}/secrets/{secret_id}"
      body: "secret"
      additional_bindings: {
        patch: "/api/v1/clients/{client_id}/secrets/{secret_id}"
        body: "secret"
      }
    };
  }

  rpc DeleteClientSecret(DeleteClientSecretRequest) returns (google.protobuf.Empty) {
    option (scalekit.v1.options.auth_option) = {authentication_type: WORKSPACE_SESSION_CLIENT};
    option (google.api.http) = {delete: "/api/v1/clients/{client_id}/secrets/{secret_id}"};
  }
}

message GetClientRequest {
  string client_id = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
}

message GetClientResponse {
  Client client = 1;
}

message ListClientsRequest {}

message ListClientsResponse {
  uint32 total_size = 1;
  repeated Client clients = 2;
}

message UpdateClientRequest {
  string client_id = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
  UpdateClient client = 2 [(buf.validate.field).required = true];
  google.protobuf.FieldMask mask = 3;
}

message UpdateClient {
  repeated string redirect_uris = 2 [(buf.validate.field).repeated = {
    unique: true
    items: {
      string: {uri: true}
    }
  }];
  optional string default_redirect_uri = 3 [(buf.validate.field).cel = {
    id: "valid_uri"
    message: "uri must be a valid URI"
    expression: "this.isUri()"
  }];
  optional string back_channel_logout_uri = 4 [(buf.validate.field).cel = {
    id: "valid_uri"
    message: "uri must be a valid URI"
    expression: "this.isUri()"
  }];

  repeated string post_logout_redirect_uris = 5 [(buf.validate.field).repeated = {
    unique: true
    items: {
      string: {uri: true}
    }
  }];
}

message UpdateClientResponse {
  Client client = 1;
}

message CreateClientSecretRequest {
  string client_id = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
}

message CreateClientSecretResponse {
  string plain_secret = 1;
  ClientSecret secret = 2;
}

message UpdateClientSecretRequest {
  string client_id = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
  string secret_id = 2 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
  UpdateClientSecret secret = 3 [(buf.validate.field).required = true];
  google.protobuf.FieldMask mask = 4;
}

message UpdateClientSecret {
  ClientSecretStatus status = 1;
}

message UpdateClientSecretResponse {
  ClientSecret secret = 1;
}

message DeleteClientSecretRequest {
  string client_id = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
  string secret_id = 2 [(buf.validate.field).string = {
    min_len: 1
    max_len: 32
  }];
}

message Client {
  string id = 1;
  string keyId = 2;
  google.protobuf.Timestamp create_time = 3;
  google.protobuf.Timestamp update_time = 4;
  repeated string redirect_uris = 5;
  string default_redirect_uri = 6;
  repeated ClientSecret secrets = 7;
  repeated string post_logout_redirect_uris = 8;
  optional string back_channel_logout_uri = 9;
}

message ClientSecret {
  string id = 1;
  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Timestamp update_time = 3;
  string secret_suffix = 4;
  optional string created_by = 5;
  ClientSecretStatus status = 6;
  google.protobuf.Timestamp expire_time = 7;
  google.protobuf.Timestamp last_used_time = 8;
}

enum ClientSecretStatus {
  ACTIVE = 0;
  INACTIVE = 1;
}
